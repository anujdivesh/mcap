import React, { useEffect, useState, useRef } from 'react';
//import './reload';
import L from 'leaflet';
import "leaflet-side-by-side";
import "./L.TileLayer.BetterWMS";
import "leaflet-bing-layer";
import {mayFlyer, addGround, addTVMarker,addWaterpoint,addShorelineImage,addLayer,addLayerprep} from "./helper";
import { setGlobalState, useGlobalState } from './globalstate';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Form from 'react-bootstrap/Form';
import './checkbox.css';
import './legend.css'
import {
  Button,Modal
} from "react-bootstrap";

//toast.configure()
const About = () => {

  //VARIABLES
  const displayRef = useRef(false);
  const layer = useRef(null);
  const layerinundation = useRef(null);
  const baseLayer = useRef();
  const satellite = useRef();
  const layer3 = useRef();
  const _isMounted = useRef(true);
  const mapContainer = React.useRef(null);
  const url ="https://tds.pacificdata.org/thredds/wms/GEM/Tuvalu/TCAP/Inundation/"
  const urlprep = "https://tds.pacificdata.org/thredds/wms/GEM/MarshallIslands/inundation/";

 const nameer = useGlobalState("island_name");
 const [watercheckRef, setWatercheckref] = useState(false);
 const [groundcheck, setGroundcheck] = useState(false);
 const [inundationcheck, setInuncationCheck] = useState(false);
 const [imageryCheck, setimageryCheck] = useState(false);

  const regionRef = useRef(nameer[0]);
  const siteRef = useRef(nameer[0]);
  const locationRef = useRef([' --Select-- ']);
  const [ value, setValue ] = React.useState();
  const [ inundationSite, setInundationSite ] = React.useState();

  const legendRef = useRef(null);
  const legendinundation = useRef(null);
  const legendColorRef = useRef(null);

  //inundation
  const horizonRef = useRef("2060");
  const horizonRef2 = useRef("0");
  const climateRef = useRef("SSP2");
  const climateRef2 = useRef("SSP2");
  const presentBoolRef = useRef(true);
  const presentBoolRef2 = useRef(false);
  const [horizon, setHorizon] = useState("present");
  const [gender, setGender] = useState("SSP2");
  const yearRef = useRef(5);
  const yearRef2 = useRef(10);
  const pointerRef = useRef(1);
  const [checked, setChecked] = React.useState(false);

  const [ value2, setValue2 ] = React.useState(pointerRef.current);
  const pointerRef2 = useRef(0);
  const [ value3, setValue3 ] = React.useState(pointerRef2.current);

   //model
   const [infoshow, setinfoshow] = useState(false);
   const [infotext, setinfotext] = useState(false);
   const handleinfo = () => {
     setinfoshow(false)
   };
   const handleClickImage= async(siteName) => {
     var text = '';
     if (siteName === "Return"){
       text = ['A ',<b>Return Period</b>,', also known as a recurrence interval or repeat interval, is an average time or an estimated average time between flood events. For example, a 5-year annual recurrence interval event, is a flood event that statistically occurs once every 5 years.',
      ];
     }
     if (siteName === "Time"){
       text = ['',<b>Time Horizon</b>,' refers to the time horizons considered here. Present Climate refers to the hazard assessment based on 1979 to 2022 ocean conditions. Sea level rise projections were obtained from the Pacific Region Infrastructure Facility (PRIF) Guidance for Managing Sea Level Rise Infrastructure Risk in Pacific Island Countries Report (2021). The report compiles sea level rise projections for most Pacific Island Countries based on the Intergovernmental Panel on Climate Change (IPCC) 6th Assessment Report (AR6). Here we consider two socioeconomic pathways (SSP2-4.5 and SSP5-8.5) for two different time horizons (2060 and 2100). The sea level rise projections were applied assuming no geomorphological changes to the islands or reefs.',
      ];
     }
     if (siteName === "Shared"){
       text = ['The 6th assessment report (AR6) of the Intergovernmental Panel for Climate Change (IPCC) utilizes data generated by the latest generation of global climate models, which were produced as part of the sixth Coupled Model Intercomparison Project (CMIP6). These collaborative endeavors involve the creation of simulations by numerous research groups worldwide, resulting in approximately 100 distinct climate models. In AR6, a new set of scenarios derived from ', <b>Shared Socioeconomic Pathways (SSPs)</b>,' is employed. The SSPs encompass five broad narratives that outline potential future socioeconomic development. These narratives are used to formulate scenarios related to energy usage, air pollution control, land use, and greenhouse gas emissions. Representative Concentration Pathways (RCPs) are then applied to these scenarios in order to achieve a roughly equivalent level of radiative forcing by the end of the 21st century.',<br/>,<br/>,
      'Here we consider the following two scenarios: Intermediate emissions scenario ', <b>(SSP2-4.5)</b>,': Approximately in line with the upper end of combined pledges under the Paris Agreement. The scenario “deviates mildly from a ‘no-additional climate-policy’ reference scenario, resulting in a best-estimate warming around 2.7 °C by the end of the 21st century”.',
     <br/>,<br/>,'Very High emissions scenario ', <b>(SSP5-8.5)</b>,': A high reference scenario with no additional climate policy. Emissions as high as SSP5–8.5 are only achieved within the fossil-fueled SSP5 socioeconomic development pathway.',
   <br/>];
     }
 
     setinfotext(text)
     setinfoshow(true)
   };
  

const algorithm = [
  "Nanumea",
  "Nui",
  "Vaitupu"
];
const language = ["Laura"];
const dataStructure = ["Peleliu", "Angaur", "Kayangel"];

const changeSelectOptionHandler = (event) => {
  if (layerinundation.current != null){
    mapContainer.current.removeLayer(layerinundation.current);
     }
  if(legendColorRef.current != null){
  mapContainer.current.removeControl(legendColorRef.current);
  }
  if(legendRef.current != null){
    mapContainer.current.removeControl(legendRef.current);
    }
    if(legendinundation.current != null){
      mapContainer.current.removeControl(legendinundation.current);
      }
  setWatercheckref(false);
  setInuncationCheck(false)
  setGroundcheck(false);
  setInundationSite(null)
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    if(layername === 2 || layername ===3){
      mapContainer.current.removeLayer(layer);
    }
  });



  mayFlyer(mapContainer.current, event.target.value);
  if (event.target.value === 'Pacific'){
    locationRef.current = [' --Select-- '];
    mapContainer.current.eachLayer(function (layer) {
      const layername = layer.options.id;
      console.log(layername)
      if(layername === 777 || layername ===4){
        mapContainer.current.removeLayer(layer);
      }
    });
    layer3.current = addTVMarker(mapContainer.current, "Tuvalu").on('click', function(e) {onClickShow2('Tuvalu')}).bindTooltip("Tuvalu", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "RMI").on('click', function(e) {onClickShow2('RMI')}).bindTooltip("RMI", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Palau").on('click', function(e) {onClickShow2('Palau')}).bindTooltip("Palau", {permanent:true,opacity:0.65});
  }
  else{
    mapContainer.current.eachLayer(function (layer) {
      const layername = layer.options.id;
      console.log(layername)
      if(layername === 777 || layername ===4){
        mapContainer.current.removeLayer(layer);
      }
    });
    if (event.target.value === 'Tuvalu'){
      layer3.current = addTVMarker(mapContainer.current, "Nanumea").on('click', function(e) {onClickShow3('Nanumea')}).bindTooltip("Nanumea", {permanent:true,opacity:0.65});
      layer3.current = addTVMarker(mapContainer.current, "Nui").on('click', function(e) {onClickShow3('Nui')}).bindTooltip("Nui", {permanent:true,opacity:0.65});
      layer3.current = addTVMarker(mapContainer.current, "Vaitupu").on('click', function(e) {onClickShow3('Vaitupu')}).bindTooltip("Vaitupu", {permanent:true,opacity:0.65});
      setValue([' --Select-- '])
    }
    if (event.target.value === 'Palau'){
      layer3.current = addTVMarker(mapContainer.current, "Peleliu").on('click', function(e) {onClickShow3('Peleliu')}).bindTooltip("Peleliu", {permanent:true,opacity:0.65});
      layer3.current = addTVMarker(mapContainer.current, "Angaur").on('click', function(e) {onClickShow3('Angaur')}).bindTooltip("Angaur", {permanent:true,opacity:0.65});
      layer3.current = addTVMarker(mapContainer.current, "Kayangel").on('click', function(e) {onClickShow3('Kayangel')}).bindTooltip("Kayangel", {permanent:true,opacity:0.65});
      setValue([' --Select-- '])
    }
  }
  setGlobalState("island_name", event.target.value);
  regionRef.current =event.target.value;
  if (event.target.value === "Tuvalu") {
    locationRef.current = algorithm;
    locationRef.current.unshift(' --Select-- ');
  } else if (event.target.value === "RMI") {
    locationRef.current = language;
  } else if (event.target.value === "Palau") {
    locationRef.current = dataStructure;
    locationRef.current.unshift(' --Select-- ');
  }
  if(event.target.value === 'RMI'){
    siteRef.current = 'Laura';
    setimageryCheck(true)
    satellite.current = addShorelineImage(mapContainer.current, siteRef.current, "MH", "2019")
  } 
  else{
    siteRef.current = null;

    setimageryCheck(false)
  }
  
};


  function initMap(url){
 
    baseLayer.current = L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution: '&copy; Pacific Community (OSM)',
      detectRetina: true,
      maxZoom:18
  });

  mapContainer.current = L.map('map', {
    zoom: 5,
    center: [ 0.878032, 155.843298]
  });
  baseLayer.current.addTo(mapContainer.current); 
  //shorelineLayer.current = addShorelineImagenoPane(mapContainer.current, siteRef.current, "2021")
 // shorelineLayer.current = addShorelineImagenoPaneGen(mapContainer.current, siteRef.current)
 if (nameer[0] === "Pacific"){
 // toast.configure()
  toast.info('Click on marker to zoom.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:6000})
  
 layer3.current = addTVMarker(mapContainer.current, "Tuvalu").on('click', function(e) {onClickShow2('Tuvalu')}).bindTooltip("Tuvalu", {permanent:true,opacity:0.65});
 layer3.current = addTVMarker(mapContainer.current, "RMI").on('click', function(e) {onClickShow2('RMI')}).bindTooltip("RMI", {permanent:true,opacity:0.65});
 layer3.current = addTVMarker(mapContainer.current, "Palau").on('click', function(e) {onClickShow2('Palau')}).bindTooltip("Palau", {permanent:true,opacity:0.65});
 }
 else if  (nameer[0] === "Tuvalu"){
  mayFlyer(mapContainer.current, siteRef.current);
  layer3.current = addTVMarker(mapContainer.current, "Nanumea").on('click', function(e) {onClickShow3('Nanumea')}).bindTooltip("Nanumea", {permanent:true,opacity:0.65});
  layer3.current = addTVMarker(mapContainer.current, "Nui").on('click', function(e) {onClickShow3('Nui')}).bindTooltip("Nui", {permanent:true,opacity:0.65});
  layer3.current = addTVMarker(mapContainer.current, "Vaitupu").on('click', function(e) {onClickShow3('Vaitupu')}).bindTooltip("Vaitupu", {permanent:true,opacity:0.65});

 }
 else if  (nameer[0] === "Palau"){
  mayFlyer(mapContainer.current, siteRef.current);
  layer3.current = addTVMarker(mapContainer.current, "Peleliu").on('click', function(e) {onClickShow3('Peleliu')}).bindTooltip("Peleliu", {permanent:true,opacity:0.65});
  layer3.current = addTVMarker(mapContainer.current, "Angaur").on('click', function(e) {onClickShow3('Angaur')}).bindTooltip("Angaur", {permanent:true,opacity:0.65});
  layer3.current = addTVMarker(mapContainer.current, "Kayangel").on('click', function(e) {onClickShow3('Kayangel')}).bindTooltip("Kayangel", {permanent:true,opacity:0.65});

 }
 else{

   // layer.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current,siteRef.current)
    mayFlyer(mapContainer.current, siteRef.current);
 }

 regionRef.current =nameer[0];
  if (nameer[0] === "Tuvalu") {
    locationRef.current = algorithm;
    locationRef.current.unshift(' --Select-- ');
  } else if (nameer[0] === "RMI") {
    locationRef.current = language;
  } else if (nameer[0] === "Palau") {
    locationRef.current = dataStructure;
    locationRef.current.unshift(' --Select-- ');
  }
  if(nameer[0] === 'RMI'){
    siteRef.current = 'Laura';
    setimageryCheck(true)
    satellite.current = addShorelineImage(mapContainer.current, siteRef.current, "MH", "2019")
  } 
  else{
    siteRef.current = null;
  }


  //Popup
  mapContainer.current.on('popupopen', function (e) {
  if(displayRef.current){
    mapContainer.current.closePopup();
  }
  
  });
  }
useEffect(() => {  
  
if (_isMounted.current){
  initMap(url);
  
}  
return () => { _isMounted.current = false }; 
},[]);


const handleYear=(e)=>{
  yearRef.current = e.target.value;
  if (layerinundation.current != null){
 mapContainer.current.removeLayer(layerinundation.current);
  }
  console.log(e.target.value)
  if (e.target.value === "MHWS"){
    layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
 // mayFlyer(mapContainer.current, siteRef.current);
/*
  if(checked === true){
    mapContainer.current.removeControl(sidebyside.current);
    mapContainer.current.removeLayer(layer2.current);
    layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current)
    sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
   }*/
 }
 else{
  layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
//  mayFlyer(mapContainer.current, siteRef.current);
/*
  if(checked === true){
    mapContainer.current.removeControl(sidebyside.current);
    mapContainer.current.removeLayer(layer2.current);
    layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current)
    sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
   }*/
  }
}
const onClickShow3= async(siteName) => {
  if(legendColorRef.current != null){
    mapContainer.current.removeControl(legendColorRef.current);
    }
    if(legendRef.current != null){
      mapContainer.current.removeControl(legendRef.current);
      }
      if(legendinundation.current != null){
        mapContainer.current.removeControl(legendinundation.current);
        }
  setWatercheckref(false);
  setInuncationCheck(false)
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    if(layername === 2 || layername ===4){
      mapContainer.current.removeLayer(layer);
    }
  });


  siteRef.current = siteName;
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777){
      mapContainer.current.removeLayer(layer);
    }
  });
  var country = "TV";
  var year = '2019';
  if (regionRef.current === 'Palau'){
    country = "PW";
    year = '2021';
  }
  if (regionRef.current === 'Tuvalu'){
    country = "TV";
    year = '2019';
  }
  if (regionRef.current === 'RMI'){
    country = "MH";
    year = '2019';
  }
  setimageryCheck(true)
  satellite.current = addShorelineImage(mapContainer.current, siteRef.current, country,year)
  setValue(siteName)
  setHorizon('present')
  
  mayFlyer(mapContainer.current, siteRef.current);
}

 const onClickShow2= async(siteName) => {
  if(legendColorRef.current != null){
    mapContainer.current.removeControl(legendColorRef.current);
    }
    if(legendRef.current != null){
      mapContainer.current.removeControl(legendRef.current);
      }
      if(legendinundation.current != null){
        mapContainer.current.removeControl(legendinundation.current);
        }
  regionRef.current = siteName;
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777 || layername === 4){
      mapContainer.current.removeLayer(layer);
    }
  });
  mayFlyer(mapContainer.current, regionRef.current);
  if (siteName === "Tuvalu") {
    locationRef.current = algorithm;
    locationRef.current.unshift(' --Select-- ');
  } else if (siteName === "RMI") {
    locationRef.current = language;
  } else if (siteName === "Palau") {
    locationRef.current = dataStructure;
    locationRef.current.unshift(' --Select-- ');
  }
  //Add markers
  if (siteName === 'Tuvalu'){
    layer3.current = addTVMarker(mapContainer.current, "Nanumea").on('click', function(e) {onClickShow3('Nanumea')}).bindTooltip("Nanumea", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Nui").on('click', function(e) {onClickShow3('Nui')}).bindTooltip("Nui", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Vaitupu").on('click', function(e) {onClickShow3('Vaitupu')}).bindTooltip("Vaitupu", {permanent:true,opacity:0.65});

  }
  if (siteName === 'Palau'){
    layer3.current = addTVMarker(mapContainer.current, "Peleliu").on('click', function(e) {onClickShow3('Peleliu')}).bindTooltip("Peleliu", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Angaur").on('click', function(e) {onClickShow3('Angaur')}).bindTooltip("Angaur", {permanent:true,opacity:0.65});
    layer3.current = addTVMarker(mapContainer.current, "Kayangel").on('click', function(e) {onClickShow3('Kayangel')}).bindTooltip("Kayangel", {permanent:true,opacity:0.65});

  }
  if(siteName === 'RMI'){
    siteRef.current = 'Laura';
    setimageryCheck(true)
    satellite.current = addShorelineImage(mapContainer.current, siteRef.current,"MH","2019")
  } 
  

  /*
  if(siteRef.current === 'DUD_south'){
    mapContainer.current.removeLayer(composite.current)
    composite.current = addLayer(mapContainer.current, url, 'DUD_north', yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current,"composite")
    iscomposite.current = !iscomposite.current;
  }
  else{
    iscomposite.current = !iscomposite.current;
  }
  layer.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current,siteRef.current)

  mayFlyer(mapContainer.current, siteRef.current);
 
  if(checked === true){
    mapContainer.current.removeControl(sidebyside.current);
    mapContainer.current.removeLayer(layer2.current);
    layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current,siteRef2.current+"2")
    sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
   }
   mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777){
      mapContainer.current.removeLayer(layer);
    }
  });
  */
  setGlobalState("island_name", siteName);  
};

const handleSite=(e)=>{
  if(legendColorRef.current != null){
    mapContainer.current.removeControl(legendColorRef.current);
    }
    if (layerinundation.current != null){
      mapContainer.current.removeLayer(layerinundation.current);
       }
    if(legendRef.current != null){
      mapContainer.current.removeControl(legendRef.current);
      }
      if(legendinundation.current != null){
        mapContainer.current.removeControl(legendinundation.current);
        }
  setWatercheckref(false);
  setGroundcheck(false);
  setInundationSite(null);
  setInuncationCheck(false);
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    if(layername === 2 || layername ===3 || layername === 4){
      mapContainer.current.removeLayer(layer);
    }
  });


  siteRef.current = e.target.value;
  mapContainer.current.eachLayer(function (layer) {
    const layername = layer.options.id;
    console.log(layername)
    if(layername === 777){
      mapContainer.current.removeLayer(layer);
    }
  });
  var country = "TV";
  var year = '2019';
  if (regionRef.current === 'Palau'){
    country = "PW";
    year = '2021';
  }
  if (regionRef.current === 'Tuvalu'){
    country = "TV";
    year = '2019';
  }
  if (regionRef.current === 'RMI'){
    country = "MH";
    year = '2019';
  }
  setimageryCheck(true)
  satellite.current = addShorelineImage(mapContainer.current, siteRef.current, country,year)
  setValue(e.target.value)
  
  mayFlyer(mapContainer.current, siteRef.current);

}

const handleWater = (e) => { 
 if (siteRef.current == null || siteRef.current ==="Tuvalu" || siteRef.current ==="Pacific"){
  setWatercheckref(false);
  toast.warning('Select Site to enable this dataset.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:4000})
 }
 else{
  setWatercheckref(!watercheckRef);
  const { value, checked } = e.target;
  if (checked === true){
    legendRef.current = L.control({ position: "topright", id:12 });
    legendRef.current.onAdd = function() {
            var div = L.DomUtil.create("div", "legend");
            div.innerHTML += "<h4>Legend</h4>";
            
            div.innerHTML += "<img src="+require('../images/new_icons/cistern.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Cistern</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/header_tank.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Header Tank</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/monitoring_well.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Monitoring Well</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/pumping_well.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Pumping well</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/sinkhole.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'>&nbspSinkhole</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/traditional_pool.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Traditional Pool</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/treatment_plant.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Treatment Plant</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/water_tank.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Water Tank</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/well_communal.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Well Communal</span><br>";
            div.innerHTML += "<img src="+require('../images/new_icons/well_private.png')+" style='width:20px; height:20px;'></i><span style='font-size:14px;'> Well Private</span><br>";
            
           return div;
          };
          legendRef.current.addTo(mapContainer.current);
    layer.current = addWaterpoint(mapContainer.current, siteRef.current);

  }
  else{
    if(legendRef.current != null){
      mapContainer.current.removeControl(legendRef.current);
      }
    mapContainer.current.eachLayer(function (layer) {
      const layername = layer.options.id;
      if(layername === 2){
        mapContainer.current.removeLayer(layer);
      }
    });
  }
 }
  e.currentTarget.blur()
}; 

const handleGround = (e) => { 
  if (siteRef.current == null || siteRef.current ==="Tuvalu" || siteRef.current ==="Pacific"){
    setGroundcheck(false)
    toast.warning('Select Site to enable this dataset.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:4000})
   }
   else{
  setGroundcheck(!groundcheck);
  const { value, checked } = e.target;
  if (checked === true){
    legendColorRef.current = L.control({ position: "topright", id:12 });
    legendColorRef.current.onAdd = function() {
            var div = L.DomUtil.create("div", "legend");
            div.innerHTML += "<h4>Legend(m)</h4>";
            div.innerHTML += '<i style="background: #c0392b"></i><span>17.0</span><br>';
            div.innerHTML += '<i style="background: #e74c3c"></i><span>14.5</span><br>';
            div.innerHTML += '<i style="background: #f1948a"></i><span>12.0</span><br>';
            div.innerHTML += '<i style="background: #fadbd8"></i><span>9.5</span><br>';
            div.innerHTML += '<i style="background: #0096FF"></i><span>7.0</span><br>';
            div.innerHTML += '<i style="background:  #00008B"></i><span>5.0</span><br>';
            div.innerHTML += '<i style="background: #A18B7E"></i><span>4.5</span><br>';
            div.innerHTML += '<i style="background: #FFFF00"></i><span>4.0</span><br>';
            
           return div;
          };
          legendColorRef.current.addTo(mapContainer.current);
    layer.current = addGround(mapContainer.current, siteRef.current)
  }
  else{
    if(legendColorRef.current != null){
      mapContainer.current.removeControl(legendColorRef.current);
      }
    mapContainer.current.eachLayer(function (layer) {
      const layername = layer.options.id;
      if(layername === 3){
        mapContainer.current.removeLayer(layer);
      }
    });
  }
   }
  e.currentTarget.blur()
}; 

const handleLand = (e) => { 
  const { value, checked } = e.target;
  e.currentTarget.blur()
}; 


const handleImagery = (e) => { 
  if (siteRef.current === null || siteRef.current ==="Tuvalu" || siteRef.current ==="Pacific"){
   setimageryCheck(false);
   toast.warning('Select Site to enable this dataset.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:4000})
  }
  else{
    setimageryCheck(!imageryCheck);
   const { value, checked } = e.target;
   if (checked === true){
    var country = "TV";
    var year = '2019';
    if (regionRef.current === 'Palau'){
      country = "PW";
      year = '2021';
    }
    if (regionRef.current === 'Tuvalu'){
      country = "TV";
      year = '2019';
    }
    if (regionRef.current === 'RMI'){
      country = "MH";
      year = '2019';
    }
    satellite.current = addShorelineImage(mapContainer.current, siteRef.current, country,year)
 
   }
   else{
     mapContainer.current.eachLayer(function (layer) {
       const layername = layer.options.id;
       if(layername === 4){
         mapContainer.current.removeLayer(layer);
       }
     });
   }
  }
   e.currentTarget.blur()
 }; 

 const handleInundation = (e) => { 
  if (siteRef.current === null || siteRef.current ==="Tuvalu" || siteRef.current ==="Pacific"){
    setInuncationCheck(false);
    toast.warning('Select Site to enable this dataset.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:4000})
   }
   else{
    setInuncationCheck(!inundationcheck);
  const { value, checked } = e.target;

  if (checked === true){
    if(regionRef.current ==='Palau'){
      setInundationSite(null);
      setInuncationCheck(false);

      toast.warning('Inundation data unavailble for the site.', {position: toast.POSITION.BOTTOM_CENTER, autoClose:4000})
    }
    else{

    legendinundation.current = L.control({ position: "topright", id:12 });
    legendinundation.current.onAdd = function() {
            var div = L.DomUtil.create("div", "legend");
            div.innerHTML += "<h4>Legend</h4>";
            div.innerHTML += '<img src="'+require('./leg.png')+'" alt="Legend">';
           return div;
          };
          legendinundation.current.addTo(mapContainer.current);
  console.log(siteRef.current)
  if (siteRef.current === 'Nanumea'||siteRef.current === 'Nui' ||siteRef.current === 'Vaitupu'){
  layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
  }
  
    if (siteRef.current === 'Laura'){
    layerinundation.current = addLayerprep(mapContainer.current, urlprep, siteRef.current, yearRef2.current,horizonRef2.current,climateRef.current,presentBoolRef.current,pointerRef.current)
    }
  setInundationSite(siteRef.current)

  }
    }
    else{
      if(legendinundation.current != null){
        mapContainer.current.removeControl(legendinundation.current);
        }
      mapContainer.current.removeLayer(layerinundation.current);
      setInundationSite(null)
    }
   

  e.currentTarget.blur()
   }
}; 


function onChangeValueHorizon(e) {
  
  setHorizon(e.target.value);
  horizonRef.current = e.target.value
  console.log(horizonRef.current);

  if (e.target.value !== "present"){
    presentBoolRef.current = false;
 // yearRef.current = e.target.value;
mapContainer.current.removeLayer(layerinundation.current);
layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
// mayFlyer(mapContainer.current, siteRef.current);
/*
if(checked === true){
  mapContainer.current.removeControl(sidebyside.current);
  mapContainer.current.removeLayer(layer2.current);
  layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current)
  sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
 }*/
}
else{
 // setHorizon2('present')
  presentBoolRef.current = true;
  mapContainer.current.removeLayer(layerinundation.current);
  layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
// mayFlyer(mapContainer.current, siteRef.current);
/*
  if(checked === true){
    mapContainer.current.removeControl(sidebyside.current);
    mapContainer.current.removeLayer(layer2.current);
    layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current)
    sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
   }*/
}
 e.currentTarget.blur();
}


function onChangeValue(e) {
   setGender(e.target.value);
  climateRef.current = e.target.value
    presentBoolRef.current = false;
mapContainer.current.removeLayer(layerinundation.current);
layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,pointerRef.current)
//mayFlyer(mapContainer.current, siteRef.current);
/*
if(checked === true){
  mapContainer.current.removeControl(sidebyside.current);
  mapContainer.current.removeLayer(layer2.current);
  layer2.current = addLayer(mapContainer.current, url, siteRef2.current, yearRef2.current,horizonRef2.current,climateRef2.current,presentBoolRef.current,pointerRef.current)
  sidebyside.current = L.control.sideBySide(layer.current, layer2.current).addTo(mapContainer.current);
 }*/
 e.currentTarget.blur();
}
const slider = (e) => {
  setValue2(e.target.value)
  //setPointer(e.target.value)
  pointerRef.current = e.target.value;
  console.log(e.target.value)
  mapContainer.current.removeLayer(layerinundation.current);
  layerinundation.current = addLayer(mapContainer.current, url, siteRef.current, yearRef.current,horizonRef.current,climateRef.current,presentBoolRef.current,e.target.value);
  e.currentTarget.blur();
}
const slider2 = (e) => {
  setValue2(e.target.value)
  //setPointer(e.target.value)
  pointerRef.current = e.target.value;
  console.log(e.target.value)
  mapContainer.current.removeLayer(layerinundation.current);
  layerinundation.current = addLayerprep(mapContainer.current, urlprep, siteRef.current, yearRef2.current,horizonRef2.current,climateRef.current,presentBoolRef.current,pointerRef.current,siteRef.current)
  e.currentTarget.blur();
}


const handleYear2=(e)=>{
  yearRef2.current = e.target.value;
  if (layerinundation.current != null){
    mapContainer.current.removeLayer(layerinundation.current);
     }

  presentBoolRef.current = true;
     layerinundation.current = addLayerprep(mapContainer.current, urlprep, siteRef.current, yearRef2.current,horizonRef2.current,climateRef.current,presentBoolRef.current,pointerRef.current,siteRef.current)


}

const slidercm2 = (e) => {
  setValue3(e.target.value)
  pointerRef2.current = e.target.value;
  if (e.target.value === "0"){
    pointerRef2.current = "0"
  } 
  if (e.target.value === "1"){
    pointerRef2.current = "0.25"
  } 
  if (e.target.value === "2"){
    pointerRef2.current = "0.5"
  } 
  if (e.target.value === "3"){
    pointerRef2.current = "1"
  } 
  if (e.target.value === "4"){
    pointerRef2.current = "2"
  } 
  setHorizon(pointerRef2.current);
  horizonRef2.current = pointerRef2.current;
  
  presentBoolRef.current = true;
  if (layerinundation.current != null){
    mapContainer.current.removeLayer(layerinundation.current);
     }
     layerinundation.current = addLayerprep(mapContainer.current, urlprep, siteRef.current, yearRef2.current,horizonRef2.current,climateRef.current,presentBoolRef.current,pointerRef.current,siteRef.current)



e.currentTarget.blur();
}




  return (
    <div className="container-fluid">
    <div className="row" style={{height:"93.5vh"}}>
    <div className="col-sm-2"  style={{backgroundColor:"#efefef",padding:0}}>
    <div className="card">
    <div className="card-body" style={{fontSize:"13px"}}>
    <ToastContainer />
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-4">

    <p>Region:</p>
      </div>
      <div className="col-sm-8">
      <select className="form-select form-select-sm" aria-label=".form-select-sm example" value={nameer[0]} onChange={changeSelectOptionHandler} style={{fontSize:'13px', paddingLeft:1}}>
      <option value="Pacific">Pacific</option>
  <option value="Tuvalu">Tuvalu</option>
  <option value="RMI">RMI</option>
  <option value="Palau">Palau</option>
</select>
      </div>
      </div>
      <hr style={{marginTop:0}}/>

    <div className="row"style={{marginTop:'-10px', marginBottom:'-15px'}}>
    <div className="col-sm-4">

    <p>Sites:</p>
      </div>

      <div className="col-sm-8">
      <select value={value}  className="form-select form-select-sm" aria-label=".form-select-sm example" onChange={handleSite} style={{fontSize:'13px', paddingLeft:1}}>
      {locationRef.current.map((v, i) => (

<option key={v} value={v}>{v}</option>
      ))}
</select>

</div>

      </div>


    
    
    </div>
  </div>
  <p style={{fontSize:"13px", paddingLeft:15, marginTop:"15px"}}>Datasets:</p>
  <div className="card" style={{marginTop:'-10px'}}>
    <div className="card-body" style={{fontSize:"13px",marginTop:'-10px', marginBottom:'-15px', paddingTop:20}}>
    <div className="row">
    <div className="col-sm-9">

    <p>Aerial Imagery</p>
      </div>
      <div className="col-sm-3">
      <Form.Check // prettier-ignore
        type="switch"
        id="custom-switch"
        onChange={handleImagery}
        checked={imageryCheck}
      />
      </div>
      </div>
      </div>
    </div>

  <div className="card" style={{marginTop:'-10px'}}>
    <div className="card-body" style={{fontSize:"13px",marginTop:'-10px', marginBottom:'-15px', paddingTop:20}}>
    <div className="row">
    <div className="col-sm-9">

    <p>Water Sources</p>
      </div>
      <div className="col-sm-3">
      <Form.Check // prettier-ignore
        type="switch"
        id="custom-switch"
        onChange={handleWater}
        checked={watercheckRef}
      />
      </div>
      </div>
      </div>
    </div>


    <div className="card" style={{marginTop:'-10px'}}>
    <div className="card-body" style={{fontSize:"13px",marginTop:'-10px', marginBottom:'-15px', paddingTop:20}}>
    <div className="row">
    <div className="col-sm-9">

    <p>Fresh groundwater</p>
      </div>
      <div className="col-sm-3">
      <Form.Check // prettier-ignore
        type="switch"
        id="custom-switch"
        onChange={handleGround}
        checked={groundcheck}
      />
      </div>
      </div>
      </div>
    </div>

    <div className="card" style={{marginTop:'-10px'}}>
    <div className="card-body" style={{fontSize:"13px",marginTop:'-10px', marginBottom:'-15px', paddingTop:20}}>
    <div className="row">
    <div className="col-sm-9">

    <p>Land use</p>
      </div>
      <div className="col-sm-3">
      <Form.Check // prettier-ignore
        type="switch"
        id="custom-switch"
        onChange={handleLand}
        checked={false}
      />
      </div>
      </div>
      </div>
    </div>

    <div className="card" style={{marginTop:'-10px'}}>
    <div className="card-body" style={{fontSize:"13px",marginTop:'-10px', marginBottom:'-15px', paddingTop:20}}>
    <div className="row">
    <div className="col-sm-9">

    <p>Inundation:</p>
      </div>
      <div className="col-sm-3">
      <Form.Check // prettier-ignore
        type="switch"
        id="custom-switch"
        onChange={handleInundation}
        checked={inundationcheck}
      />
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      {(inundationSite ==='Nanumea' || inundationSite ==='Nui' || inundationSite ==='Vaitupu') ?
      <div className="row">
    <div className="col-sm-12">


    <div className="row"style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Return Period: <input alt="loading.." onClick={function(e) {handleClickImage('Return')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/>
     {/* <img onClick={function(e) {handleClickImage('Return period')}} src={require('./info.png')} alt='logo' style={{width:"13px", height:"13px"}}/>*/}</p>
      </div>

      <div className="col-sm-6">
      <select className="form-select form-select-sm" aria-label=".form-select-sm example" onChange={handleYear} id="Year1" name="Year1" style={{fontSize:'13px', paddingLeft:1}}>
  <option value="5">5 Year</option>
  <option value="10">10 Year</option>
  <option value="25">25 Year</option>
  <option value="50">50 Year</option>
  <option value="100">100 Year</option>
  <option value="MHWS">MHWS - No Waves</option>
</select>

</div>

      </div>

      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p>Time Horizon: <input alt="loading.." onClick={function(e) {handleClickImage('Time')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">

      <div className="form-check">
                  <input type="radio" className="form-check-input" value="present" id="present"
               name="horizon" onChange={onChangeValueHorizon} checked={horizon === "present"}/>
             <label>Present Climate </label>
             </div>
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="2060" id="2060"
                name="horizon" onChange={onChangeValueHorizon} checked={horizon === "2060"}/>
             <label>2060</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="2100" id="2100"
                name="horizon" onChange={onChangeValueHorizon} checked={horizon === "2100"} />
             <label>2100</label>
             </div>
              
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-6">

    <p style={{fontSize:'11.5px'}}>Shared Socioeconomic Pathway: <input alt="loading.." onClick={function(e) {handleClickImage('Shared')}} type="image" src={require('./info.png')} style={{marinTop:"10px", width:"15px", height:"15px"}}/></p>
      </div>
      <div className="col-sm-6">
      <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP2" id="SSP2"
                name="gender" onChange={onChangeValue} checked={gender === "SSP2"} disabled={presentBoolRef.current }/>
             <label>SSP2 4.5</label>
             </div>
             <div className="form-check">
                  <input type="radio" className="form-check-input" value="SSP5" id="SSP5"
               name="gender" onChange={onChangeValue} checked={gender === "SSP5"} disabled={presentBoolRef.current}/>
             <label>SSP5 8.5</label>
             </div>
      </div>
      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginBottom:'-15px',marginTop:'-10px'}}>
      <div className="col-sm-4">
<p>Opacity:</p> </div>
    <div className="col-sm-5">
    <input type="range" className="form-range" onClick={(e) => e.currentTarget.blur()} min={0} max={1} step={0.1} id="refreshButton" value={value2} onChange={slider} style={{height:'10px'}}/>
      </div>
      <div className="col-sm-3">
       <p>{pointerRef.current*100}%</p>
      </div>
      </div>
     

      </div>
      </div>
      :null}

{(inundationSite ==='Laura') ?
      <div className="row">
    <div className="col-sm-12">


    <div className="row">
 <div className="col-sm-6">

 <p>Return Period:</p>
   </div>
   <div className="col-sm-6">
    <select className="form-select form-select-sm" aria-label=".form-select-sm example" onChange={handleYear2} style={{fontSize:'13px', paddingLeft:1}}>
    <option value="10">10 Year</option>
  <option value="25">25 Year</option>
  <option value="50">50 Year</option>
  <option value="100">100 Year</option>
  <option value="250">250 Year</option>
  </select>
   </div>
   </div>

   <hr style={{marginTop:0}}/>
   <div className="row" style={{marginTop:'-10px'}}>
    <div className="col-sm-5">

    <p>Sea Level Rise:</p>
      </div>
      <div className="col-sm-7">
      <div className="row">
             <div className="col-sm-7">
    <input type="range" className="form-range" onClick={(e) => e.currentTarget.blur()} min={0} max={4} step={1} id="refreshButton22" value={value3} onChange={slidercm2} style={{height:'10px'}}/>
      </div>
      <div className="col-sm-5">
       <p>{pointerRef2.current}m</p>
      </div>   
      </div> 
      </div> 

      </div>
      <hr style={{marginTop:0}}/>
      <div className="row" style={{marginBottom:'-15px',marginTop:'-10px'}}>
      <div className="col-sm-4">
<p>Opacity:</p> </div>
    <div className="col-sm-5">
    <input type="range" className="form-range" onClick={(e) => e.currentTarget.blur()} min={0} max={1} step={0.1} id="refreshButton" value={value2} onChange={slider2} style={{height:'10px'}}/>
      </div>
      <div className="col-sm-3">
       <p>{pointerRef.current*100}%</p>
      </div>
      </div>
      </div>
      </div>
      :null}

      </div>
    </div>


      </div>
      <div className="col-sm-10" style={{padding:0}}>
      <div  className="content" id="map" ref={mapContainer} style={{width:"100%", height:"100%",Zindex: "auto"}}></div>
      </div>
    </div>
    <Modal show={infoshow} onHide={handleinfo} size="lg">
    <Modal.Header>
      Information
      </Modal.Header>
      
        <Modal.Body>
        <p style={{fontSize:'12px'}}>{infotext}</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleinfo}>
            Close
          </Button>
         
        </Modal.Footer>
      </Modal>
  </div>

  )
}
export default About;
